In this implementation of TCP for motes, the methodology was to provide a "wrapper" for reliable communications for any message struct (provided it is small enough) that the user is using.  In cooperation with this wrapper, AMSend and Receive were both provided by the TCPSendC component.  For the low level networking functionality, the original AMSend and Receive were used as Send and AMReceive.  In doing this, it was possible to gain some of the reliability of TCP (through ACKing), while leaving it to the user what to do in certain error conditions.

The TCPMessage wrapper contains three 16-bit values: an ACK, the address the message was sent from, and the user message size.  Finally it contains a 50 byte array to store the user message.  The ACK is a TRUE/FALSE value (we did not implement sequencing, windowing, etc.).  It is TRUE if the message being sent is an acknowledgement, FALSE if the message is simply an outstanding packet.  The user message size facilitates extracting the user's data intact without requiring excessive lengthy syntax on their part.  The payload array is 50 bytes long, and is the most efficient way to store general data without knowing what it is, given that nesC does not really have inheritance or classes.

The test application uses a simple, 14 byte long SensorMessage struct as the user type.  It uses the typical AMSend.getPayload(&message, sizeof(SensorMessage)), but it uses the implementation provided by TCPSendC.  This loads their message into the TCPMessage's payload array, and stores the user data size.  Then, in the test application, the user message is stuffed with certain values for each field.  It then sends this message off with the provided AMSend.  The user must then decide what to do upon finishing sending (i.e. toggle an LED and unlock the message for editing).

Beneath the surface, TCPSendC also keeps track of how many times it has tried to retransmit the message.  It sets a one shot timer upon transmission of a message.  At a particular time after receiving no ACK (which it will know because the message will still be locked in the TCPSendC module), it will retransmit.  After MAX_RETRY retransmits (set to 5 in this case) it signals a sendDone(message, TCP_NOACK).  It is up to the user to decide what to do at this point.

On the receive side, if it is the originally transmitting mote receiving an ACK, the message is unlocked and AMSend.sendDone(message, SUCCESS) is signaled.  If it is the mote receiving the outstanding message, ACK is set to TRUE, the acknowledgement is sent back to the mote the message came from, and the provided receive event is signaled.  In either case, double buffering is implemented.

For debugging purposes, LEDs toggled at key events and data was watched using serial transmission.




POSSIBLE DISCUSSION TOPICS for Future Work

- Low power operation was not attained in the time allotted.

- We need to determine, at such low power states, what qualifies as a distance where communication is not reliable?

- Shall we implement semi standards-compliance?  I.e., shall we structure the packet according to IEEE guidelines?

- Consider what features of TCP could be left out (i.e. are the packets even large enough to need segmenting?)
